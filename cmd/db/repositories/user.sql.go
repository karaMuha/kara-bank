// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const getUser = `-- name: GetUser :one
SELECT
  email, hashed_password, first_name, last_name, created_at
FROM
  users
WHERE
  email = $1
LIMIT
1
`

func (q *Queries) GetUser(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return &i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO
    users (
    email,
    hashed_password,
    first_name,
    last_name
  )
VALUES (
  $1, $2, $3, $4
)
RETURNING
  email, hashed_password, first_name, last_name, created_at
`

type RegisterUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg *RegisterUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, registerUser,
		arg.Email,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return &i, err
}
